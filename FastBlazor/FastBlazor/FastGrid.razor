@implements IFastGrid
@typeparam TItem

<CascadingValue IsFixed="true" Value=@(this)>
    @(Columns)
</CascadingValue>

@if (Title != null)
{
    <h1>
        @(Title)
    </h1>
}
else
{
    <h1>
        @(typeof(TItem).Name) List
    </h1>
}
<table class="table">
    <thead>
        <tr>
            @foreach (var column in GridColumns)
            {
                <th>
                    <div class="unselectable" @onclick="_ => Sort(column)" style="@(column.Sortable ? "cursor:pointer" : "")">

                        @(column.Title)

                        @if (column.Sortable)
                        {
                            @switch (column.SortOrder)
                            {
                                case null:

                                    <i class="glyphicon glyphicon-sort" />

                                    break;

                                case false:

                                    <i class="glyphicon glyphicon-sort-by-alphabet" />

                                    break;

                                case true:

                                    <i class="glyphicon glyphicon-sort-by-alphabet-alt" />

                                    break;
                            }
                        }

                    </div>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @if (Data != null)
        {
            @foreach (var item in Data)
            {
                <tr>
                    @if (Columns == null)
                    {
                        @if (typeof(TItem).IsClass)
                        {
                            @foreach (var property in item.GetType().GetProperties())
                            {
                                <th>@property.GetValue(item)</th>
                            }
                        }
                        else
                        {
                            <th>@item</th>
                        }
                    }
                    else
                    {
                        @foreach (var column in GridColumns)
                        {
                            <th>@column.GetDataValue(item)</th>
                        }
                    }
                </tr>
            }
        }
    </tbody>
</table>

@code
{
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public IList<TItem> Data { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    private IList<TItem> GridData;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();

            GridData = Data;
        }
    }

    private void Sort(FastGridColumn column)
    {
        if (column.Sortable)
        {
            switch (column.SortOrder)
            {
                case null:

                    Data = GridData.OrderBy(x => typeof(TItem).GetProperty(column.Property).GetValue(x)).ToList();

                    column.SortOrder = false;

                    break;

                case false:

                    Data = GridData.OrderByDescending(x => typeof(TItem).GetProperty(column.Property).GetValue(x)).ToList();

                    column.SortOrder = true;

                    break;

                case true:

                    Data = GridData;

                    column.SortOrder = null;

                    break;
            }
        }
    }

    private readonly List<FastGridColumn> GridColumns = new List<FastGridColumn>();

    Type IFastGrid.Type { get { return typeof(TItem); } }

    void IFastGrid.AddColumn(FastGridColumn column)
    {
        GridColumns.Add(column);
    }
}
